Change I953610d0: Fix duplicate name of NVP LBaaS objs not allowed on vShield Edge

Fix duplicate name of NVP LBaaS objs not allowed on vShield Edge

Duplicate name of LBaaS objs such as pool/vip/app_profile is not
allowed on vShield Edge, so here a name convention is needed to ensure
name uniqueness on the edge side.
Closes-Bug: #1257225

Change-Id: I953610d0389a78aa01f378c2ff4931d8c74413ea

NOTE:
1. This change involves technical issues highly specific to vendor(vmware)
   and/or products(vCloud, vSphere, vShield, vDNS, etc.). Therefore, we cannot
   dig very deep.
2. This commit is made by a vmware employee, yet immaturity in programming was
   clearly demonstrated by his work.

DIFF:
diff --git a/neutron/plugins/vmware/vshield/common/constants.py b/neutron/plugins/vmware/vshield/common/constants.py
index 8d8ace0..1c2aa25 100644 (file)
--- a/neutron/plugins/vmware/vshield/common/constants.py
+++ b/neutron/plugins/vmware/vshield/common/constants.py
@@ -33,6 +33,8 @@ APPEND = -1
 # error code
 VCNS_ERROR_CODE_EDGE_NOT_RUNNING = 10013
 
+SUFFIX_LENGTH = 8
+
 
 # router status by number
 class RouterStatus(object):
diff --git a/neutron/plugins/vmware/vshield/edge_loadbalancer_driver.py b/neutron/plugins/vmware/vshield/edge_loadbalancer_driver.py
index 63f0bcc..cb9e24e 100644 (file)
--- a/neutron/plugins/vmware/vshield/edge_loadbalancer_driver.py
+++ b/neutron/plugins/vmware/vshield/edge_loadbalancer_driver.py
@@ -57,7 +57,8 @@ class EdgeLbDriver():
             context.session, pool_id, edge_id)
         pool_vseid = poolid_map['pool_vseid']
         return {
-            'name': vip.get('name'),
+            'name': vip.get(
+                'name', '') + vip['id'][-vcns_const.SUFFIX_LENGTH:],
             'description': vip.get('description'),
             'ipAddress': vip.get('address'),
             'protocol': vip.get('protocol'),
@@ -74,7 +75,7 @@ class EdgeLbDriver():
             vip_vse['defaultPoolId'])
 
         return {
-            'name': vip_vse['name'],
+            'name': vip_vse['name'][:-vcns_const.SUFFIX_LENGTH],
             'address': vip_vse['ipAddress'],
             'protocol': vip_vse['protocol'],
             'protocol_port': vip_vse['port'],
@@ -83,7 +84,8 @@ class EdgeLbDriver():
 
     def _convert_lb_pool(self, context, edge_id, pool, members):
         vsepool = {
-            'name': pool.get('name'),
+            'name': pool.get(
+                'name', '') + pool['id'][-vcns_const.SUFFIX_LENGTH:],
             'description': pool.get('description'),
             'algorithm': BALANCE_MAP.get(
                 pool.get('lb_method'),
@@ -112,7 +114,7 @@ class EdgeLbDriver():
     def _restore_lb_pool(self, context, edge_id, pool_vse):
         #TODO(linb): Get more usefule info
         return {
-            'name': pool_vse['name'],
+            'name': pool_vse['name'][:-vcns_const.SUFFIX_LENGTH],
         }
 
     def _convert_lb_monitor(self, context, monitor):
NOTE:
1. The main change is to enhance name uniqueness in the domain of vShield Edge
   (who was complaining about that) with least changes possible (the internals
   of neutron have no requirement on uniqueness). For that purpose, name suffix
   adding/removing is implemented.
2. The class in question, EdgeLbDriver, acts as an interface from the load
   balancer to the Edge. For the four interesting items, 'vip', 'pool',
   'health monitor', it defines four interface operations, 'get', 'update',
   'delete', 'create'. As implementation details, for the four items mentioned
   above, it defined 'convert' and 'restore' functions with single leading
   underscore signifying their private purposes. The construction of objects,
   and in particular names, are delegated by create_vip/pool() and
   get_vip/pool() to _convert_lb_vip/pool() and _restore_lb_vip/pool().
3. Whenever a vip object is transferred to the vShield Edge by
   create_vip/pool(), _convert_lb_vip/pool() will extract a certain number
   (defined as SUFFIX_LENGTH, currently 8) of characters from last of the id
   string and append to name as suffix. Whenever a vip object is transferred
   back from vShield by get_vip/pool(), _restore_lb_vip/pool() will strip the
   same number of characters from last of name string.
4. The intermediate patch set shows some immaturity. First of all, the string
   length was originally defined to be -8, which is a bit weird. Secondly,
   tests were once missing. By the way, test cases are always harder to get
   good.

diff --git a/neutron/tests/unit/vmware/vshield/fake_vcns.py b/neutron/tests/unit/vmware/vshield/fake_vcns.py
index 2e097e8..37dcbf5 100644 (file)
--- a/neutron/tests/unit/vmware/vshield/fake_vcns.py
+++ b/neutron/tests/unit/vmware/vshield/fake_vcns.py
@@ -369,16 +369,24 @@ class FakeVcns(object):
                 break
         return self.return_helper(header, response)
 
+    def is_name_unique(self, objs_dict, name):
+        return name not in [obj_dict['name']
+                            for obj_dict in objs_dict.values()]
+
     def create_vip(self, edge_id, vip_new):
+        header = {'status': 403}
+        response = ""
         if not self._fake_virtualservers_dict.get(edge_id):
             self._fake_virtualservers_dict[edge_id] = {}
+        if not self.is_name_unique(self._fake_virtualservers_dict[edge_id],
+                                   vip_new['name']):
+            return self.return_helper(header, response)
         vip_vseid = uuidutils.generate_uuid()
         self._fake_virtualservers_dict[edge_id][vip_vseid] = vip_new
         header = {
             'status': 204,
             'location': "https://host/api/4.0/edges/edge_id"
                         "/loadbalancer/config/%s" % vip_vseid}
-        response = ""
         return self.return_helper(header, response)
 
     def get_vip(self, edge_id, vip_vseid):
@@ -413,15 +421,19 @@ class FakeVcns(object):
         return self.return_helper(header, response)
 
     def create_pool(self, edge_id, pool_new):
+        header = {'status': 403}
+        response = ""
         if not self._fake_pools_dict.get(edge_id):
             self._fake_pools_dict[edge_id] = {}
+        if not self.is_name_unique(self._fake_pools_dict[edge_id],
+                                   pool_new['name']):
+            return self.return_helper(header, response)
         pool_vseid = uuidutils.generate_uuid()
         self._fake_pools_dict[edge_id][pool_vseid] = pool_new
         header = {
             'status': 204,
             'location': "https://host/api/4.0/edges/edge_id"
                         "/loadbalancer/config/%s" % pool_vseid}
-        response = ""
         return self.return_helper(header, response)
 
     def get_pool(self, edge_id, pool_vseid):
diff --git a/neutron/tests/unit/vmware/vshield/test_lbaas_plugin.py b/neutron/tests/unit/vmware/vshield/test_lbaas_plugin.py
index 1b1b67b..221c411 100644 (file)
--- a/neutron/tests/unit/vmware/vshield/test_lbaas_plugin.py
+++ b/neutron/tests/unit/vmware/vshield/test_lbaas_plugin.py
@@ -201,6 +201,31 @@ class TestLoadbalancerPlugin(
                 protocol='TCP',
                 session_persistence={'type': 'HTTP_COOKIE'})
 
+    def test_create_vips_with_same_names(self):
+        new_router_id = self._create_and_get_router()
+        with self.subnet() as subnet:
+            net_id = subnet['subnet']['network_id']
+            self._set_net_external(net_id)
+            with contextlib.nested(
+                self.vip(
+                    name='vip',
+                    router_id=new_router_id,
+                    subnet=subnet, protocol_port=80),
+                self.vip(
+                    name='vip',
+                    router_id=new_router_id,
+                    subnet=subnet, protocol_port=81),
+                self.vip(
+                    name='vip',
+                    router_id=new_router_id,
+                    subnet=subnet, protocol_port=82),
+            ) as (vip1, vip2, vip3):
+                req = self.new_list_request('vips')
+                res = self.deserialize(
+                    self.fmt, req.get_response(self.ext_api))
+                for index in range(len(res['vips'])):
+                    self.assertEqual(res['vips'][index]['name'], 'vip')
+
     def test_update_vip(self):
         name = 'new_vip'
         router_id = self._create_and_get_router()
diff --git a/neutron/tests/unit/vmware/vshield/test_loadbalancer_driver.py b/neutron/tests/unit/vmware/vshield/test_loadbalancer_driver.py
index 7ff53f3..db0a772 100644 (file)
--- a/neutron/tests/unit/vmware/vshield/test_loadbalancer_driver.py
+++ b/neutron/tests/unit/vmware/vshield/test_loadbalancer_driver.py
@@ -109,6 +109,19 @@ class TestEdgeLbDriver(VcnsDriverTestCase):
                 for k, v in vip_get.iteritems():
                     self.assertEqual(vip_create[k], v)
 
+    def test_create_two_vips_with_same_name(self):
+        ctx = context.get_admin_context()
+        with self.pool(no_delete=True) as pool:
+            self.pool_id = pool['pool']['id']
+            POOL_MAP_INFO['pool_id'] = pool['pool']['id']
+            vcns_db.add_vcns_edge_pool_binding(ctx.session, POOL_MAP_INFO)
+            with self.vip(pool=pool) as res:
+                vip_create = res['vip']
+                self.driver.create_vip(ctx, VSE_ID, vip_create)
+                self.assertRaises(vcns_exc.Forbidden,
+                                  self.driver.create_vip,
+                                  ctx, VSE_ID, vip_create)
+
     def test_convert_app_profile(self):
         app_profile_name = 'app_profile_name'
         sess_persist1 = {'type': "SOURCE_IP"}
@@ -246,6 +259,16 @@ class TestEdgeLbDriver(VcnsDriverTestCase):
             for k, v in pool_get.iteritems():
                 self.assertEqual(pool_create[k], v)
 
+    def test_create_two_pools_with_same_name(self):
+        ctx = context.get_admin_context()
+        with self.pool(no_delete=True) as p:
+            self.pool_id = p['pool']['id']
+            pool_create = p['pool']
+            self.driver.create_pool(ctx, VSE_ID, pool_create, [])
+            self.assertRaises(vcns_exc.Forbidden,
+                              self.driver.create_pool,
+                              ctx, VSE_ID, pool_create, [])
+
     def test_update_pool(self):
         ctx = context.get_admin_context()
         with self.pool(no_delete=True) as p:
NOTES:
1. The necessity of adding testing cases in test_lbaas_plugin.py dawned
   on the author when a commenter pointed out. The rational is that
   theoretically the neutron side uses ID instead name, we do need to verify
   that vip objects with same names are allowed to coexist and function
   normally.
2. The two tests added to test_loadbalancer_driver.py essentially create vips/
   tools with same id and expect 403 Forbidden exceptions. But the function
   names suggest otherwise. Do not know why...

