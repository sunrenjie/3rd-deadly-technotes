enable ssl:
env DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib java -cp $(echo target/*.jar | sed 's/ /:/g') -Dssl=true com.manning.nettyinaction.examples.netty.http2.helloworld.server.Http2Server
env DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib java -cp $(echo target/*.jar | sed 's/ /:/g') -Dssl=true com.manning.nettyinaction.examples.netty.http2.helloworld.client.Http2Client

disable ssl:
java -cp $(echo target/*.jar | sed 's/ /:/g') com.manning.nettyinaction.examples.netty.http2.helloworld.server.Http2Server
java -cp $(echo target/*.jar | sed 's/ /:/g') com.manning.nettyinaction.examples.netty.http2.helloworld.client.Http2Client

================================================================================
=====Client raw output (ssl disabled)=====
$ java -cp $(echo target/*.jar | sed 's/ /:/g') com.manning.nettyinaction.examples.netty.http2.helloworld.client.Http2Client
Connected to [127.0.0.1:8080]
User Event Triggered: UPGRADE_ISSUED
#NOTICE protocol upgrade issued by upgradeHandler installed in
Http2ClientInitializer.configureClearText(). Without ssl (and hence NPN/ALPN),
the upgraded protocol is called clear-text http/2, or h2c.
#NOTICE end
10:47:03.002 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------OUTBOUND--------------------
#NOTICE how to read the output?
0. The contents are between the two lines: '---OUT(IN)BOUND---' and '--------'.
1. The initial part '[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080]' shall
remain literally the same during one connection (no matter whether the message
is outbound or not). Maybe something generated by some channel related method.
2. These parts are self-evident: INBOUND, OUTBOUND, settings, ack, etc.
#NOTICE end
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] SETTINGS: ack=false, settings={}
------------------------------------
User Event Triggered: UPGRADE_SUCCESSFUL
#NOTICE output by Http2ClientInitializer.UserEventLogger; protocol gradle see
http://netty.io/5.0/api/io/netty/handler/codec/http/HttpClientUpgradeHandler.UpgradeEvent.html
#NOTICE end
10:47:03.043 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------INBOUND--------------------
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] SETTINGS: ack=false, settings={}
------------------------------------
10:47:03.047 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------OUTBOUND--------------------
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] SETTINGS: ack=true
------------------------------------
Sending request(s)...
#NOTICE within Http2Client, the upgrade finishes successfully. Now we are going
to make a request. It seems the ack part resembles TCP three-way handshaking
much?
#NOTICE end
10:47:03.073 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------INBOUND--------------------
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] HEADERS: streamId=1, headers=DefaultHttp2Headers[:status: 200, http-to-http2-upgrade: true], streamDependency=0, weight=16, exclusive=false, padding=0, endStream=true
------------------------------------
Message received for unknown stream id 1
#NOTICE output generated by HttpResponseHandler.channelRead0();
#NOTICE end
10:47:03.100 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------OUTBOUND--------------------
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] HEADERS: streamId=3, headers=DefaultHttp2Headers[:path: /whatever, :method: GET, :scheme: http, :authority: 127.0.0.1:8080, accept-encoding: gzip, accept-encoding: deflate], streamDependency=0, weight=16, exclusive=false, padding=0, endStream=true
#NOTICE First http/2 request: GET /whatever
#NOTICE end
------------------------------------
10:47:03.104 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------INBOUND--------------------
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] SETTINGS: ack=true
#NOTICE request ack
#NOTICE end
------------------------------------
10:47:03.123 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------INBOUND--------------------
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] HEADERS: streamId=3, headers=DefaultHttp2Headers[:status: 200], streamDependency=0, weight=16, exclusive=false, padding=0, endStream=false
#NOTICE response header (the package type is set to HEADERS)
#NOTICE end
------------------------------------
10:47:03.124 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------INBOUND--------------------
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] DATA: streamId=3, padding=0, endStream=true, length=24, bytes=48656c6c6f20576f726c64202d2076696120485454502f32
#NOTICE response data (package type set to DATA) received
#NOTICE end
------------------------------------
Hello World - via HTTP/2
#NOTICE stdout generated by HttpResponseHandler.channelRead0()
(the content is processed by our business logic, the response is marked as OK)
#NOTICE end
---Stream id: 3 received---
#NOTICE stdout generated by HttpResponseHandler.awaitResponses()
(the response OK info is finally acknowledged)
#NOTICE end
Finished HTTP/2 request(s)
#NOTICE now the channel will be close()'ed and program will exit.
10:47:03.135 [nioEventLoopGroup-2-1] INFO  c.m.n.e.n.h.h.c.Http2ClientInitializer - 
----------------OUTBOUND--------------------
[id: 0x25a999a9, /127.0.0.1:50917 => /127.0.0.1:8080] GO_AWAY: lastStreamId=0, errorCode=0, length=0, bytes=
#NOTICE The final package to say goodbye.
------------------------------------
================================================================================


================================================================================
=====Server raw output (ssl disabled)=====

$ java -cp $(echo target/*.jar | sed 's/ /:/g') com.manning.nettyinaction.examples.netty.http2.helloworld.server.Http2Server
13:05:40.501 [nioEventLoopGroup-2-1] INFO  i.n.handler.logging.LoggingHandler - [id: 0x191289ed] REGISTERED
13:05:40.507 [nioEventLoopGroup-2-1] INFO  i.n.handler.logging.LoggingHandler - [id: 0x191289ed] BIND: 0.0.0.0/0.0.0.0:8080
Open your HTTP/2-enabled web browser and navigate to http://127.0.0.1:8080/
#NOTICE Surprisingly, if ssl is enabled, the only difference seen in output
will only be here: => https://127.0.0.1:8443/ (everything ssl-related shall surely be handled
and encapsulated in the ssl handler).
#NOTICE end
13:05:40.513 [nioEventLoopGroup-2-1] INFO  i.n.handler.logging.LoggingHandler - [id: 0x191289ed, /0:0:0:0:0:0:0:0:8080] ACTIVE
13:06:26.859 [nioEventLoopGroup-2-1] INFO  i.n.handler.logging.LoggingHandler - [id: 0x191289ed, /0:0:0:0:0:0:0:0:8080] RECEIVED: [id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080]
#NOTICE The initial connection?
#NOTICE end
13:06:27.181 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------OUTBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] SETTINGS: ack=false, settings={}
#TODO This initial package is outbound? Or the packages are just re-ordered? (see below)
------------------------------------
User Event Triggered: UpgradeEvent [protocol=h2c, upgradeRequest=HttpObjectAggregator$AggregatedFullHttpRequest(decodeResult: success, version: HTTP/1.1, content: CompositeByteBuf(ridx: 0, widx: 0, cap: 0, components=0))
GET / HTTP/1.1
upgrade: h2c
HTTP2-Settings: AAEAABAAAAIAAAABAAN_____AAQAAP__AAUAAEAAAAZ_____
connection: HTTP2-Settings,upgrade
content-length: 0]
13:06:27.293 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------OUTBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] HEADERS: streamId=1, headers=DefaultHttp2Headers[:status: 200, http-to-http2-upgrade: true], streamDependency=0, weight=16, exclusive=false, padding=0, endStream=true
#NOTICE The initial http/2 package: upgrade OK.
------------------------------------
13:06:27.322 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------INBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] SETTINGS: ack=false, settings={}
------------------------------------
13:06:27.339 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------OUTBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] SETTINGS: ack=true
------------------------------------
13:06:27.405 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------INBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] SETTINGS: ack=true
#TODO The ordering is wrong? the three handshaking packages sent AFTER the first http/2 package?
------------------------------------
13:06:27.438 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------INBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] HEADERS: streamId=3, headers=DefaultHttp2Headers[:path: /whatever, :method: GET, :scheme: http, :authority: 127.0.0.1:8080, accept-encoding: gzip, accept-encoding: deflate], streamDependency=0, weight=16, exclusive=false, padding=0, endStream=true
------------------------------------
13:06:27.453 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------OUTBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] HEADERS: streamId=3, headers=DefaultHttp2Headers[:status: 200], streamDependency=0, weight=16, exclusive=false, padding=0, endStream=false
------------------------------------
13:06:27.454 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------OUTBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] DATA: streamId=3, padding=0, endStream=true, length=24, bytes=48656c6c6f20576f726c64202d2076696120485454502f32
------------------------------------
13:06:27.489 [nioEventLoopGroup-2-2] INFO  c.m.n.e.n.h.h.s.HelloWorldHttp2Handler - 
----------------INBOUND--------------------
[id: 0x1f89e5f0, /127.0.0.1:51523 => /127.0.0.1:8080] GO_AWAY: lastStreamId=0, errorCode=0, length=0, bytes=
------------------------------------
================================================================================

