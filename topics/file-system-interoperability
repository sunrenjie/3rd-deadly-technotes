On File System Interoperability

We use different types of file systems in different operating systems.
Routine data exchange among them raises the problem of interoperability. In
one of the worst catastrophe recently, writing a FAT partition by Mac OS X
resulted in deleting of one huge (>500GB) NTFS partition, on which majority
of our data is stored. In minor cases, writing of NTFS partitions by Linux
resulted in data loss and/or file system error.

These disasters urge us to work out some SOPs on exchanging data on the
various file systems. To be brief, in order to ensure maximum safely, we shall
only write to file systems for which native support is available,
except with good reasons. Read support shall be deployed as much as possible
to help us figure out workaround solutions when there is a need to write to
file systems without native support.

What kind of file system support is native? Its OS vendor invented it,
shipped it in the OS (and hence having tested it extremely heavily behind the
scene), held relevant patents around it (if there is any).

Here are the detailed support status:

File System    Windows    Linux    Mac OS X
NTFS           RW         RO [1]   RO
FAT*           RW         RO [1]   RO [1]
ext2/3/4       RO [2]     RW       NA [4]
Apple HPFS     RO [3]     RO [1]   RW

Notes: Reference OS'es are XP/7 for Windows, Fedora 20/21 x86_64 for Linux,
Mac OS X 10.9. Abbreviations: 'RW' for native read/write support (we discourage
non-native write anyway, despite availability of some commecial solutions),
'RO' for read only, 'NA' for unavailable. We can easily deduce that reading
support for all file systems as listed are available in Windows, meaning that
Windows+NTFS/FAT is the ideal combination to manipulate/store our data. In
particular, Windows/FAT may seems better for small-capacity USB thumb drives or
SD/TF cards.

Also:
[1] Official yet not native write support may trick us to use it and hurt us.
    Always disabled it. Majority of data/file system corruption happens in
    such cases.
[2] Read only support is available via third-party software ext2fsd.
[3] Read only support is available via Apple bootcamp or third-party software
    HFSExplorer.
[4] There is no official support. Nor is stable 3rd party support available.
    There exists a commecial product Paragon ExtFS for Mac OS X. Initial
    tests revealed that read support may be unstable: during installation
    of Xcode 7.1.1, we could not place the DMG file in ext4 and install
    directly from it, though we could copy the DMG file to local disk and
    install from it without problem.

* There are several FAT variants: FAT/FAT32/exFAT, etc. Now that they are
  under similar situations in our discussion, we don't bother to distinguish
  among them.

Once again, always disable write for non-native support. If there is absolute
necessity, resort to some high-level well-supported portable protocols instead
of meddling with 'raw' file systems. For example, transmitting over network
via NFS/SFTP is very usable, though the throughput may be limited.

When smart phones are involved, there are more choices. Apple iOS way of
transferring files via iTunes is limited by iTunes' availability. On Android,
one choice is MTP, via an android phone over USB cable. The implementation is
available on all platforms (with exception of some samsung android phones on
Mac OS X) with transmission rate close to disk I/O in certain occasions, and
terribly low in other occasions (for example, very large quantity of small
files at once on Windows) [1] . On the other hand, 'adb pull/push' is available
from the platform-tools of Android SDK, again available on all platforms.
Unlike MTP, the transfer is relatively stable, according to some experiments.
Maybe that is due to its usage of TCP/IP stack.

More advices:
1. While samsung android smart phones supports exFAT for its TF card, we
strongly recommend against doing so: sometimes files on the card created by
the phone can not be read by MTP, or even when inserting to a card reader
connected to a computer (though the phone can read it without any problem). For
one thing, exFAT format is copyrighted by Microsoft; Samsung's implementation
may be buggy or differs from the standard 'a bit'. On the other hand, exFAT is
said to be far less reliable than FAT since it has only one file table. Use
FAT32 as much as possible; for very large TF cards (>32GB), format it with some
special-purpose Windows FAT32 formatter, as Windows itself cannot do it
natively.

===================================================
Using rsync to transfer files among all major OS'es

The stack ssh+rsync is found to be universally available, truely portable and
usable in ALL major operating systems we use, without taking care of the
underlying file system implementations.

One benefit of this stack is that the underlying TCP/IP is universally
available. Desktop operating systems may use LAN or wifi, while the mobile ones
can create ad-hoc wifi hotspot trivially, on which ssh+rsync can transfer data
at speed as high as 6-7MB/s.

Availability of softwares (rsync, ssh/d):
Windows: The cwRsync distribution (https://www.itefix.net/cwrsync) contains
rsync and ssh; ssh/d is available from mintty and cygwin.
Linux: all are available from the officla package management system.
Mac OS X: all come with the OS.
Android: all can be installed from the termux app.
iOS: all can be installed from cydia.

Installation Notes:
0) Each mobile device shall install sshd. The reason is that it is difficult to
type commands directly there; they have be used as ssh server.
1) Each device shall install the rsync program; there is no distinction between
clients and servers.

Usages:

First of all, rsync is mainly useful when the transfer of data involve
difference calculation. For plain copying, other technologies may be faster
and or easier (for example, MTP-over-Android, ShareIt, or simply scp).

rsync --size-only -rv -n --delete --progress \
  -e 'ssh -i ./termux-id_rsa -p 8022' \
  192.168.43.1:/storage/extSdCard/a/t.hotspot/ t.hotspot/

Note the specification of the folder names with terminal slash in the source
and destination paths.

Options:
-a: don't use it, it implies much stuff: -rlptgoD (preserve links, permissions,
  modification times, ownerships, device/special files, to name a few);
  instead, we typically need -r (and -t sometimes).
--progress: to display a progress bar to charm the user
--delete: to delete extra files
-e: specify ssh command, this is where we could specify ssh port and identity
  key to login
-n: dry run
--checksum: to verify files based on file checksum; may be very expensive to
  run when a mobile OS is involved.
--size-only: to verify files based on size only; can be useful, for example,
  in sync'ing lite, in which files of the same name rarely differ.

Known Limitation:
android: cannot login with password; has to authenticate via key files;
  non-ASCII chars can't be displayed properly within ssh terminal (probably the
  limitation of the terminal and/or ssh implementation of termux, since the adb
  shell can display them properly).
mac->android: Non-ASCII chars not be displayed properly in rsync listing,
  though the transferred files are given names properly.

